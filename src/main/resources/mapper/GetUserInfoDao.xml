<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.Dao.GetUserInfoDao">
    <insert id="addFriend">
        INSERT INTO friend VALUES (#{toid},#{friendid});
    </insert>
    <insert id="register" keyProperty="register.account" useGeneratedKeys="true">
        INSERT INTO user(name,password,mail,lastime,mailcrc) VALUES (#{register.name},#{register.password},#{register.mail},0,CRC32(#{register.mail}));
    </insert>
    <insert id="insertAddRequest">
        INSERT INTO add_request(userId, toId, time) VALUES (#{request.userId}, #{request.toId}, #{request.time})
    </insert>
    <update id="logout">
        UPDATE user SET lastime = #{lastime} WHERE account = #{id};
    </update>
    <update id="changePassWord">
        UPDATE user SET password = #{password} where mailcrc = CRC32(#{mail}) and mail = #{mail};
    </update>
    <update id="changePassWordByid">
        UPDATE user SET password = #{password} where account = #{userid};
    </update>
    <update id="updateAvatar">
        UPDATE user SET icon = #{avatar} where account = #{userId};
    </update>
    <delete id="deleteFriend">
        DELETE FROM friend WHERE toid = #{toid} and friendid = #{friendid};
    </delete>
    <delete id="deleteAddRequest">
        DELETE FROM add_request WHERE id = #{requestId};
    </delete>
    <select id="getUserInfo" resultType="com.Entity.User">
        SELECT * FROM user WHERE mailcrc = CRC32(#{mail}) and mail = #{mail};
    </select>
    <select id="getUserByIndex" resultType="com.Entity.User">
        SELECT account, name FROM user  WHERE  account = #{index} or name = #{index};
          </select>
    <select id="getFriends" resultType="com.Entity.User">
        SELECT u.account, u.name, u.icon, u.mail
        FROM friend AS f LEFT JOIN user AS u
        ON f.friendid = u.account
        WHERE toid=#{account};
    </select>
    <select id="checkFriend" resultType="com.Entity.Friend">
        SELECT * FROM friend WHERE toid = #{userid} and  friendid = #{toid};
    </select>
    <select id="findUser" resultType="com.Entity.User">
        SELECT * FROM user where account = #{id};
    </select>
    <select id="getUsers" resultType="com.Entity.User">
        SELECT * FROM user;
    </select>
    <select id="getAddRequest" resultType="com.Entity.AddRequest">
        SELECT
        a.id AS id, a.userId AS userId, a.toId AS toId, a.time AS time, u.name AS userName, u.icon AS userAvatar
        FROM add_request AS a LEFT JOIN user AS u
        ON a.userId = u.account
        WHERE toId = #{toId}
    </select>
    <select id="findRequest" resultType="com.Entity.AddRequest">
        SELECT * FROM add_request
        WHERE (userId = #{userId} AND toId = #{toId}) OR (userId = #{toId} AND toId = #{userId})
    </select>
    <select id="getAddRequestById" resultType="com.Entity.AddRequest">
        SELECT
        a.id AS id, a.userId AS userId, a.toId AS toId, a.time AS time, u.name AS userName, u.icon AS userAvatar
        FROM add_request AS a LEFT JOIN user AS u
        ON a.userId = u.account
        WHERE id = #{id};
    </select>
    <select id="searchUsers" resultType="com.Entity.User">
        SELECT
         account, name, mail, icon
        FROM user
        WHERE (mail LIKE concat(concat("%",#{searchString}),"%") OR name LIKE concat(concat("%",#{searchString}),"%")) AND account != #{userId};
    </select>
</mapper>